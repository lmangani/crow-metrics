"use strict";

let registry = require("./registry");
let util = require("util");

let HEADER = `# generated by crow`;

/*
 * observer that latches results into a text buffer suitable for sending
 * to prometheus (in a web server you host).
 */
class PrometheusObserver {
  constructor() {
    this.lastTimestamp = 0;
    this.lastSnapshot = {};
  }

  register(registry) {
    registry.addObserver((timestamp, snapshot) => {
      this.lastTimestamp = timestamp;
      this.lastSnapshot = snapshot;
    });
  }

  /*
   * generate the text body of a response to a prometheus query.
   * this is used by 'prometheusExporter', or you can use it directly to
   * attach the prometheus endpoint to an existing web service if you want.
   */
  generate() {
    let lines = [ HEADER ];
    let types = this.lastSnapshot["@types"] || {};

    for (let name in types) {
      let typename = "unknown";
      switch (types[name]) {
        case registry.MetricType.GAUGE:
          typename = "gauge";
          break;
        case registry.MetricType.COUNTER:
          typename = "counter";
          break;
        case registry.MetricType.DISTRIBUTION:
          typename = "summary";
          break;
      }
      lines.push(`# TYPE ${name} ${typename}`);
    }

    for (let name in this.lastSnapshot) {
      if (name[0] == "@") continue;
      lines.push(`${name} ${this.lastSnapshot[name]} ${this.lastTimestamp}`);
    }

    return lines.join("\n") + "\n";
  }
}

/*
 * given an 'express' (or express-like) module, create a prometheus observer
 * attached to a registry. the returned object is meant to be 'use'd by
 * express, like this:
 *
 *     var crow = require("crow-metrics");
 *     var express = require("express");
 *
 *     var registry = new crow.Registry();
 *     var app = express();
 *     app.use("/metrics", crow.prometheusExporter(express, registry));
 *     app.listen(9090);
 */
function prometheusExporter(express, registry) {
  const observer = new PrometheusObserver();
  observer.register(registry);

  const router = express.Router();
  router.get("/", (request, response) => {
    response.set("Content-Type", "text/plain; version=0.0.4");
    response.send(this.generate());
  });

  return router;
}


exports.prometheusExporter = prometheusExporter;
exports.PrometheusObserver = PrometheusObserver;
