"use strict";

// import { Registry } from "./registry";


/*
 * observer that latches results into a text buffer suitable for sending
 * to prometheus (in a web server you host).
 */
export class PrometheusObserver {
  constructor() {
    this.lastTimestamp = 0;
    this.lastSnapshot = null;
    this.header = "# generated by crow";
  }

  register(registry) {
    registry.addObserver(snapshot => {
      this.lastTimestamp = snapshot.timestamp;
      this.lastSnapshot = snapshot;
    });
    this.header = `# generated by crow ${registry.version}`;
  }

  /*
   * generate the text body of a response to a prometheus query.
   * this is used by 'prometheusExporter', or you can use it directly to
   * attach the prometheus endpoint to an existing web service if you want.
   */
  generate() {
    const lines = [ this.header ];

    if (this.lastSnapshot) {
      // build type fields.
      const seen = new Set();
      for (const [ metric ] of this.lastSnapshot.map) {
        let typename = metric.constructor.name.toLowerCase();
        if (typename == "distribution") typename = "summary";
        if (!seen.has(metric.name)) lines.push(`# TYPE ${metric.name} ${typename}`);
        seen.add(metric.name);
      }

      const map = this.lastSnapshot.flatten((name, tags, subkey) => {
        if (subkey) {
          // prometheus has an odd quirk here: percentiles should be marked
          // as "quantile"s, but the sum and count should mangle the original
          // metric name.
          if (subkey == "count" || subkey == "sum") {
            name = name + "_" + subkey;
          } else {
            tags = tags.merge({ quantile: subkey });
          }
        }

        // prometheus wants OpenTSDB tags to have quoted values.
        return name + tags.format((k, v) => k + "=\"" + v + "\"", list => "{" + list.join(",") + "}");
      });

      for (const [ name, { value } ] of map) {
        lines.push(`${name} ${value} ${this.lastTimestamp}`);
      }
    }

    return lines.join("\n") + "\n";
  }
}

/*
 * given an 'express' (or express-like) module, create a prometheus observer
 * attached to a registry. the returned object is meant to be 'use'd by
 * express, like this:
 *
 *     import { prometheusExporter, Registry } from "crow-metrics";
 *     import express from "express";
 *
 *     const registry = new Registry();
 *     const app = express();
 *     app.use("/metrics", prometheusExporter(express, registry));
 *     app.listen(9090);
 */
export function prometheusExporter(express, registry) {
  const observer = new PrometheusObserver();
  observer.register(registry);

  const router = express.Router();
  router.get("/", (request, response) => {
    response.set("Content-Type", "text/plain; version=0.0.4");
    response.send(observer.generate());
  });

  return router;
}
