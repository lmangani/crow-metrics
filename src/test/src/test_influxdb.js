"use strict";

import { exportInflux, MetricsRegistry } from "../../lib";

import "should";
import "source-map-support/register";


describe("exportInflux", () => {
  const saved = [];
  const request = (options, callback) => {
    saved.push(options);
    callback(null);
  };

  beforeEach(() => {
    saved.splice(0, saved.length);
  });


  it("reports empty metrics", () => {
    const r = new MetricsRegistry();
    exportInflux(r, request, { hostname: "influxdb.dev.example.com:8086", database: "wut", timeout: 500 });
    r._publish();
    saved.length.should.eql(1);
    saved[0].should.eql({
      "body": `# generated by crow ${r.version}\n`,
      "headers": { "content-type": "text/plain" },
      "method": "post",
      "timeout": 500,
      "url": "http://influxdb.dev.example.com:8086/write?db=wut"
    });
  });

  it("reports actual metrics", () => {
    const r = new MetricsRegistry();
    exportInflux(r, request);
    r.counter("tickets").increment(5);
    r.setGauge("speed", { vessel: "sailboat" }, 100);
    r.distribution("bugs").add(20);
    r._publish();

    saved.length.should.eql(1);
    const timestamp = saved[0].body.split("\n")[1].split(" ")[2];
    (Date.now() - (timestamp / 1000000)).should.be.lessThan(1000);
    saved[0].body.split("\n").slice(1).should.eql([
      `tickets value=5 ${timestamp}`,
      `speed,vessel=sailboat value=100 ${timestamp}`,
      `bugs,p=0.5 value=20 ${timestamp}`,
      `bugs,p=0.9 value=20 ${timestamp}`,
      `bugs,p=0.99 value=20 ${timestamp}`,
      `bugs,p=count value=1 ${timestamp}`,
      `bugs,p=sum value=20 ${timestamp}`,
      ``
    ]);
  });
});
