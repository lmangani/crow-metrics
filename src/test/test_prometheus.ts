import { exportPrometheus, Metrics } from "..";

import "should";
import "source-map-support/register";


describe("PrometheusObserver", () => {
  let m: Metrics;

  beforeEach(() => {
    m = Metrics.create();
  });

  afterEach(() => {
    m.registry.stop();
  });

  function getTimestamp(line: string): number {
    const m = line.match(/^# generated by crow \S+ @ (\d+)$/);
    (m != null).should.eql(true);
    return m ? parseInt(m[1], 10) : 0;
  }

  it("makes empty file", () => {
    const docs: string[] = [];
    m.events.map(exportPrometheus).forEach(d => docs.push(d));
    m.registry.publish();
    docs.length.should.eql(1);
    const lines = docs[0].split("\n");
    lines.length.should.eql(2);
    lines[0].startsWith("# generated by crow").should.eql(true);
    lines[1].should.eql("");
  });

  it("reports counters & gauges", () => {
    const docs: string[] = [];
    m.events.map(exportPrometheus).forEach(d => docs.push(d));
    m.increment(m.counter("trucks"), 10);
    m.setGauge(m.gauge("temperature"), 21);
    m.registry.publish();

    docs.length.should.eql(1);
    const lines = docs[0].split("\n");
    const ts = getTimestamp(lines[0]);
    lines.slice(1).should.eql([
      "# TYPE temperature gauge",
      `temperature 21 ${ts}`,
      "# TYPE trucks counter",
      `trucks 10 ${ts}`,
      ""
    ]);
  });

  it("reports distributions", () => {
    const docs: string[] = [];
    m.events.map(exportPrometheus).forEach(d => docs.push(d));
    m.addDistribution(m.distribution("coins_building_4"), [ 10, 11, 12 ]);
    m.registry.publish();

    docs.length.should.eql(1);
    const lines = docs[0].split("\n");
    const ts = getTimestamp(lines[0]);
    lines.slice(1).should.eql([
      "# TYPE coins_building_4 summary",
      `coins_building_4{quantile="0.5"} 11 ${ts}`,
      `coins_building_4{quantile="0.9"} 12 ${ts}`,
      `coins_building_4{quantile="0.99"} 12 ${ts}`,
      `coins_building_4_count 3 ${ts}`,
      `coins_building_4_sum 33 ${ts}`,
      ""
    ]);
  });

  it("reports with tags", () => {
    const docs: string[] = [];
    m.events.map(exportPrometheus).forEach(d => docs.push(d));
    m.increment(m.counter("trucks", { state: "TN" }), 10);
    m.increment(m.counter("trucks", { state: "SC" }), 4);
    m.setGauge(m.gauge("trunks"), 15);
    m.setGauge(m.gauge("torque"), 16);
    m.registry.publish();

    docs.length.should.eql(1);
    const lines = docs[0].split("\n");
    const ts = getTimestamp(lines[0]);
    lines.slice(1).should.eql([
      "# TYPE torque gauge",
      `torque 16 ${ts}`,
      "# TYPE trucks counter",
      `trucks{state="SC"} 4 ${ts}`,
      `trucks{state="TN"} 10 ${ts}`,
      "# TYPE trunks gauge",
      `trunks 15 ${ts}`,
      ""
    ]);
  });
});
